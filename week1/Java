class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> permutations = new ArrayList<>();
        Boolean[] used = new Boolean[nums.length];
        for(int i = 0; i < nums.length; i++)
            used[i] = false;
        Swap(nums, 0, new ArrayList<>(), permutations, used);
        return permutations;
    }

    public int Swap(int[] nums, int idx, List<Integer> permutation, List<List<Integer>> permutations, Boolean[] used) {
        {
            {
                if(idx == nums.length) {
                    permutations.add(permutation);
                    return 0;
                }

                for(int i = 0; i < nums.length; i++) {
                    List<Integer> newPermutation = new ArrayList<>(permutation);
                    if(used[i])
                        continue;
                    newPermutation.add(idx, nums[i]);
                    used[i] = true;
                    Swap(nums, idx + 1,newPermutation, permutations, used);
                    used[i] = false;
                }
            }
            return 1;
        }
    }
}
