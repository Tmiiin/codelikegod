class Solution {
    public static ArrayList<Boolean> used = new ArrayList<>();

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> permutations = new ArrayList<>();
        for(int i = 0; i < nums.length; i++)
            used.add(false);
        Rec(nums, 0, new ArrayList<>(), permutations);
        return permutations;
    }
    
    public int Rec(int[] nums, int idx, List<Integer> permutation, List<List<Integer>> permutations) {
        {
            {
                if(idx == nums.length) {
                    permutations.add(permutation);
                    return 0;
                }

                for(int i = 0; i < nums.length; i++) {
                    List<Integer> newPermutation = new ArrayList<>(permutation);
                    if(used.get(i))
                        continue;
                    newPermutation.add(idx, nums[i]);
                    used.remove(i);
                    used.add(i,true);
                    Rec(nums, idx + 1, newPermutation, permutations);
                    used.remove(i);
                    used.add(i, false);
                }
            }
            return 1;
        }
    }
}
